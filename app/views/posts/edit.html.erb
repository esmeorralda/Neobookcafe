
<div class="mx-auto flex justify-center gap-8 bg-[#f7f1ea] relative">
  <div class="max-w-4xl w-full p-8 bg-[#f7f1ea] rounded">
    <%= form_with model: @post, local: true, class: "space-y-6", id: "post-form" do |f| %>
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-xl font-bold text-gray-800">게시글 수정</h1>
      </div>

      <!-- 기본 정보 -->
      <div class="flex justify-between items-center gap-2 max-w-4xl mx-auto bg-[#f7f1ea]">
        <div class="flex flex-col w-1/3">
          <label for="category-select" class="mb-1 text-sm font-medium">게시판 선택</label>
          <select id="category-select" name="post[category]" class="border border-gray-300 p-2 bg-white w-full rounded">
            <option value="thought" <%= "selected" if @post.category == "thought" %>>감상문</option>
            <option value="discussion" <%= "selected" if @post.category == "discussion" %>>논설문</option>
            <option value="creation" <%= "selected" if @post.category == "creation" %>>창작물</option>
            <option value="board" <%= "selected" if @post.category == "board" %>>자유게시글</option>
          </select>
        </div>

        <div class="flex flex-col w-1/2">
          <label for="book_title" class="mb-1 text-sm font-medium">책 제목</label>
          <input
            type="text"
            id="book_title"
            name="post[book_title]"
            value="<%= @post.book_title %>"
            class="border border-gray-300 p-2 bg-white w-full rounded"
          />
        </div>

        <div class="flex flex-col w-1/3">
          <label for="book_author" class="mb-1 text-sm font-medium">책 저자</label>
          <input
            type="text"
            id="book_author"
            name="post[book_author]"
            value="<%= @post.book_author %>"
            class="border border-gray-300 p-2 bg-white w-full rounded"
          />
        </div>
      </div>

      <div class="text-sm">
        <%= f.label :title, "게시글 제목", class: "mb-1" %>
        <%= f.text_field :title, value: @post.title, class: "w-full border border-gray-300 p-2 bg-white rounded" %>
      </div>

      <!-- 장르 선택 -->
      <div id="genre-container">
        <span class="text-sm mr-2">장르</span>

        <% # 기존 선택된 장르가 배열 형태라고 가정 (ex: @post.genres) %>
        <% selected_genres = @post.book_genre || [] %>

        <% ["철학", "문학", "역사", "사회", "경제", "과학/기술"].each do |genre| %>
          <label class="mr-2 text-sm genre-default <%= 'hidden' unless ['thought', 'discussion'].include?(@post.category) %>">
            <%= radio_button_tag "genres[]", genre, selected_genres.include?(genre) %> <%= genre %>
          </label>
        <% end %>

        <% ["시", "에세이", "소설"].each do |genre| %>
          <label class="mr-2 text-sm genre-creation <%= @post.category == 'creation' ? '' : 'hidden' %>">
            <%= radio_button_tag "genres[]", genre, selected_genres.include?(genre) %> <%= genre %>
          </label>
        <% end %>

        <% ["책 추천", "책 홍보", "작가 이야기", "독서팁/습관", "책 관련 행사 홍보", "책 Q&A", "기타"].each do |genre| %>
          <label class="mr-2 text-sm genre-board <%= @post.category == 'board' ? '' : 'hidden' %>">
            <%= radio_button_tag "genres[]", genre, selected_genres.include?(genre) %> <%= genre %>
          </label>
        <% end %>

  
      </div>

      <!-- 본문 (종이 느낌 영역) -->
      <!-- 자바스크립트에서 채우는 대신 서버에서 초기 블럭을 렌더링 -->
<div id="blocks-container" class="bg-white p-6 shadow mt-4 rounded"
     style="min-height: 800px; max-height: 1200px; overflow-y: auto; font-family: 'Noto Sans KR', sans-serif; line-height: 1.4;">

  <% if @post.post_blocks.present? %>
    <% @post.post_blocks.each_with_index do |block, i| %>
      <% 
        # 초기 높이 계산
        line_height = 22
        max_chars_per_line = 50
        content = block.content || ""
        estimated_lines = [1, (content.length / max_chars_per_line.to_f).ceil].max
        initial_height = estimated_lines * line_height
      %>

      <div class="block block-type-<%= block.block_type || 'paragraph' %>">
        <select name="post[post_blocks_attributes][<%= i %>][block_type]"
                class="block-type-selector block-controls-left"
                style="padding: 0.2rem 0.5rem; border: 1px solid #ccc; border-radius: 0.25rem; background: white;">
          <option value="paragraph" <%= "selected" if block.block_type == "paragraph" %>>문단</option>
          <option value="quote" <%= "selected" if block.block_type == "quote" %>>인용</option>
          <option value="subtitle" <%= "selected" if block.block_type == "subtitle" %>>소제목</option>
        </select>

        <textarea name="post[post_blocks_attributes][<%= i %>][content]"
                  placeholder="내용을 입력하세요"
                  oninput="this.style.height='auto';this.style.height=this.scrollHeight + 'px';"
                  style="width: 100%; font-size: 1rem; resize: none; background: transparent; outline: none; min-height: 1.4em; line-height: 1.4; margin: 0; padding: 0.1em 0.25em; font-family: serif; overflow-y: hidden; border: none; box-sizing: border-box; height: <%= initial_height %>px;"><%= block.content %></textarea>

        <% unless i == 0 %>
          <button type="button" class="block-controls-right" title="블록 삭제">삭제</button>
        <% end %>
      </div>
    <% end %>
  <% else %>
    <% # 아무 블럭도 없으면 빈 블럭 하나 기본 추가 %>
    <% 
      line_height = 22
      content = ""
      initial_height = line_height
    %>
    <div class="block block-type-paragraph">
      <select name="post[post_blocks_attributes][0][block_type]"
              class="block-type-selector block-controls-left"
              style="padding: 0.2rem 0.5rem; border: 1px solid #ccc; border-radius: 0.25rem; background: white;">
        <option value="paragraph" selected>문단</option>
        <option value="quote">인용</option>
        <option value="subtitle">소제목</option>
      </select>

      <textarea name="post[post_blocks_attributes][0][content]"
                placeholder="내용을 입력하세요"
                oninput="this.style.height='auto';this.style.height=this.scrollHeight + 'px';"
                style="width: 100%; font-size: 1rem; resize: none; background: transparent; outline: none; min-height: 1.4em; line-height: 1.4; margin: 0; padding: 0.1em 0.25em; font-family: serif; overflow-y: hidden; border: none; box-sizing: border-box; height: <%= initial_height %>px;"></textarea>
    </div>
  <% end %>
</div>

    <% end %>
  </div>

  <!-- 오른쪽 세로 버튼들 -->
<div class="flex flex-col space-y-2 sticky top-24 mt-10" style="height: fit-content;">
  <% if @post.persisted? %>
    <%= button_tag "업데이트", type: "submit",
      name: "commit",
      value: "update",
      form: "post-form",
      data: { turbo_confirm: "수정 내용을 저장하시겠습니까?" }, class: "bg-[#5d3b2e] text-white px-4 py-2 text-sm" %>

    <div class="flex flex-col space-y-2 sticky top-24 " style="height: fit-content;">
      <a href="<%= post_path(@post) %>"
         class="bg-white text-black px-4 py-2 text-sm border border-gray-300 inline-block text-center"
         data-turbo-confirm="취소하시겠습니까? 변경 내용은 저장되지 않습니다."
         data-turbo-method="get">
        취소
      </a>
    </div>
  <% else %>
    <%= button_tag "업로드", type: "submit",
      name: "commit",
      value: "create",
      form: "post-form",
      data: { turbo_confirm: "게시글을 업로드하시겠습니까?" }, class: "bg-[#5d3b2e] text-white px-4 py-2 text-sm" %>

    <div class="flex flex-col space-y-2 sticky top-24 " style="height: fit-content;">
      <a href="<%= posts_path %>"
         class="bg-white text-black px-4 py-2 text-sm border border-gray-300 inline-block text-center"
         data-turbo-confirm="취소하시겠습니까? 변경 내용은 저장되지 않습니다."
         data-turbo-method="get">
        취소
      </a>
    </div>
  <% end %>
</div>

</div>
<style>
  blocks-container {
    font-family: 'Noto Sans KR', sans-serif;
    border: 1px solid #ddd;
    box-shadow: inset 0 0 5px #eee;
    padding: 1rem 1.5rem;
    min-height: 800px;
    max-height: 1200px;
    overflow-y: auto;
    line-height: 1.4;
  }

  .block {
    position: relative;
    background: white;
    border-radius: 0.375rem;
    box-shadow: 0 0 0 transparent;
    transition: box-shadow 0.2s ease, border-color 0.2s ease;
    border: 1px solid transparent;
  }

  /* 포커스 또는 호버 시 보더, 그림자 */
  .block:hover,
  .block.focused {
    # box-shadow: 1px 4px 4px rgb(0 0 0 / 0.1);
    border-color: lightgray;
  }

  /* 드롭다운 왼쪽 상단 */
  .block-controls-left {
    position: absolute;
    top: -1.5rem;
    left: 0.75rem;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease;
    font-size: 0.85rem;
  }

  /* 삭제 버튼 오른쪽 상단 */
  .block-controls-right {
    position: absolute;
    top: -1.5rem;
    right: 0.75rem;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease;
    font-size: 0.85rem;
    color: #dc2626;
    background: transparent;
    border: none;
    cursor: pointer;
    font-weight: bold;
  }

  .block:hover .block-controls-left,
  .block:hover .block-controls-right,
  .block.focused .block-controls-left,
  .block.focused .block-controls-right {
    opacity: 1;
    pointer-events: auto;
  }

  .block-controls-right:hover {
    color: #b91c1c;
  }

  .block textarea {
    width: 100%;
    font-size: 1rem;
    resize: none;
    background: transparent;
    outline: none;
    min-height: 1.4em;
    line-height: 1.4;
    margin: 0;
    padding: 0.1em 0.25em;
    font-family: serif;
    overflow-y: hidden;
    height: auto;
    border: none;
    box-sizing: border-box;
  }

  /* 문단 스타일 */
  .block-type-paragraph textarea {
    font-size: 1rem;
    color: #333;
    line-height: 1.4;
  }

  /* 인용 스타일 */
  .block-type-quote textarea {
    font-style: italic;
    border-left: 4px solid #5d3b2e;
    padding-left: 0.5rem;
    color: #2c1a0d;
  }

  /* 소제목 스타일 */
  .block-type-subtitle textarea {
    background-color: #fff;
    font-weight: 600;
    font-size: 1.125rem;
    color: #2c1a0d;
    margin: 1rem 0 0.5rem 0;
    padding-bottom: 0.25rem;
  }
  #blocks-container .block:first-child {
    margin-top: 1.5rem;
  }
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const container = document.getElementById("blocks-container");

   document.addEventListener("DOMContentLoaded", () => {
    setTimeout(() => {
      location.reload();
    }, 3000); // 3000ms = 3초
  });


  function autoResizeTextarea(textarea) {
    textarea.style.height = "auto";
    const value = textarea.value;
    const lineHeightEm = 1.4;
    const fontSizePx = parseFloat(getComputedStyle(textarea).fontSize) || 16;
    const lineHeightPx = lineHeightEm * fontSizePx;
    const maxCharsPerLine = 50;

    if (
      value.trim() === "" ||
      (!value.includes("\n") && value.length <= maxCharsPerLine)
    ) {
      textarea.style.height = lineHeightPx + "px";
    } else {
      textarea.style.height = textarea.scrollHeight + "px";
    }
  }

  function createBlock(type = "paragraph", content = "") {
    const block = document.createElement("div");
    block.classList.add("block");
    block.classList.add(`block-type-${type}`);

    const blocksCount = container.querySelectorAll(".block").length;

    const textarea = document.createElement("textarea");
    textarea.name = `post[post_blocks_attributes][${blocksCount}][content]`;
    textarea.value = content;
    textarea.placeholder = "내용을 입력하세요";

    textarea.addEventListener("input", () => autoResizeTextarea(textarea));
    textarea.addEventListener("paste", () => {
      setTimeout(() => autoResizeTextarea(textarea), 0);
    });

    autoResizeTextarea(textarea);

    const select = document.createElement("select");
    select.name = `post[post_blocks_attributes][${blocksCount}][block_type]`;
    select.className = "block-type-selector block-controls-left";
    select.style.padding = "0.2rem 0.5rem";
    select.style.border = "1px solid #ccc";
    select.style.borderRadius = "0.25rem";
    select.style.background = "white";

    const options = [
      { val: "paragraph", label: "문단" },
      { val: "quote", label: "인용" },
      { val: "subtitle", label: "소제목" }
    ];
    options.forEach(opt => {
      const option = document.createElement("option");
      option.value = opt.val;
      option.textContent = opt.label;
      if (opt.val === type) option.selected = true;
      select.appendChild(option);
    });

    select.addEventListener("change", () => {
      block.classList.remove("block-type-paragraph", "block-type-quote", "block-type-subtitle");
      block.classList.add(`block-type-${select.value}`);
    });

    if (blocksCount > 0) {
      const removeBtn = document.createElement("button");
      removeBtn.type = "button";
      removeBtn.textContent = "삭제";
      removeBtn.className = "block-controls-right";
      removeBtn.title = "블록 삭제";
      removeBtn.addEventListener("click", () => {
        container.removeChild(block);
        updateBlockNames();
      });
      block.appendChild(removeBtn);
    }

    block.appendChild(select);
    block.appendChild(textarea);
    container.appendChild(block);

    updateBlockNames();

    textarea.focus();
    autoResizeTextarea(textarea);

    let hideTimeout;
    block.addEventListener("mouseleave", () => {
      hideTimeout = setTimeout(() => block.classList.remove("focused"), 300);
    });
    block.addEventListener("mouseenter", () => {
      clearTimeout(hideTimeout);
      block.classList.add("focused");
    });
    [select, textarea].forEach(el => {
      el.addEventListener("focus", () => {
        clearTimeout(hideTimeout);
        block.classList.add("focused");
      });
      el.addEventListener("blur", () => {
        hideTimeout = setTimeout(() => {
          if (!block.contains(document.activeElement)) {
            block.classList.remove("focused");
          }
        }, 300);
      });
    });

    textarea.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        const blocks = Array.from(container.querySelectorAll(".block textarea"));
        const currentIndex = blocks.indexOf(textarea);
        const hasNextBlock = currentIndex < blocks.length - 1;
        if (hasNextBlock) {
          blocks[currentIndex + 1].focus();
          blocks[currentIndex + 1].setSelectionRange(0, 0);
        } else {
          const cursorPos = textarea.selectionStart;
          const value = textarea.value;
          const before = value.slice(0, cursorPos);
          const after = value.slice(cursorPos);

          textarea.value = before;
          autoResizeTextarea(textarea);

          createBlock("paragraph", after);
        }
      }
      if (e.key === "ArrowUp") {
        const blocks = Array.from(container.querySelectorAll(".block textarea"));
        const currentIndex = blocks.indexOf(textarea);
        if (currentIndex > 0 && textarea.selectionStart === 0) {
          e.preventDefault();
          const prev = blocks[currentIndex - 1];
          prev.focus();
          prev.setSelectionRange(prev.value.length, prev.value.length);
        }
      }
      if (e.key === "ArrowDown") {
        const blocks = Array.from(container.querySelectorAll(".block textarea"));
        const currentIndex = blocks.indexOf(textarea);
        if (currentIndex < blocks.length - 1 && textarea.selectionStart === textarea.value.length) {
          e.preventDefault();
          const next = blocks[currentIndex + 1];
          next.focus();
          next.setSelectionRange(0, 0);
        }
      }
    });

    return textarea;
  }

  function updateBlockNames() {
    const blocks = container.querySelectorAll(".block");
    blocks.forEach((block, idx) => {
      const textarea = block.querySelector("textarea");
      const select = block.querySelector("select");
      if (textarea) {
        textarea.name = `post[post_blocks_attributes][${idx}][content]`;
      }
      if (select) {
        select.name = `post[post_blocks_attributes][${idx}][block_type]`;
      }
    });
  }

  const initialBlocks = <%= raw @post.post_blocks.map { |b| { content: b.content, block_type: b.block_type } }.to_json.html_safe %>;

  if (initialBlocks.length > 0) {
    container.innerHTML = "";
    initialBlocks.forEach(blockData => {
      createBlock(blockData.block_type || "paragraph", blockData.content || "");
    });
  } else {
    createBlock();
  }

  // 카테고리 선택 시 장르 토글
  const categorySelect = document.getElementById("category-select");
  function toggleGenres() {
    const selected = categorySelect.value;
    document.querySelectorAll(".genre-default").forEach(el => el.classList.toggle("hidden", selected !== "thought" && selected !== "discussion"));
    document.querySelectorAll(".genre-creation").forEach(el => el.classList.toggle("hidden", selected !== "creation"));
    document.querySelectorAll(".genre-board").forEach(el => el.classList.toggle("hidden", selected !== "board"));
  }
  categorySelect.addEventListener("change", toggleGenres);
  toggleGenres();
});

</script>
