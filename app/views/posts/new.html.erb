<div class="mx-auto flex justify-center gap-8 bg-[#f7f1ea] relative">
  <div class="max-w-4xl w-full p-8 bg-[#f7f1ea] rounded">
    <%= form_with model: @post, local: true, class: "space-y-6", id: "post-form" do |f| %>
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-xl font-bold text-gray-800">새 게시글 작성</h1>
      </div>
<% if @alert_messages.present? %>
  <div class="bg-white mb-6 flex items-start gap-3 text-left whitespace-pre-wrap break-words rounded-md p-6 shadow-md border border-yellow-400 text-yellow-900 font-semibold">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 flex-shrink-0 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" aria-hidden="true">
      <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v2m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
    <div class="px-4"><%= @alert_messages %></div>
  </div>
<% end %>



      <!-- 기본 정보 -->
      <div class="flex justify-between items-center gap-2 max-w-4xl mx-auto bg-[#f7f1ea]">
      
        <div class="flex flex-col w-1/3">
          <label for="category-select" class="mb-1  text-sm font-medium">게시판 선택</label>
         <select id="category-select" name="post[category]" class="border border-gray-300 p-2 bg-white w-full rounded">
           <option value="discussion" <%= "selected" if @post&.category == "discussion" %>>논설문</option>
  <option value="thought" <%= "selected" if @post&.category == "thought" %>>감상문</option>
  <option value="creation" <%= "selected" if @post&.category == "creation" %>>창작물</option>
  <option value="board" <%= "selected" if @post&.category == "board" %>>자유게시글</option>
</select>
        </div>

        <div class="flex flex-col w-1/2">
          <label for="book_title" class="mb-1  text-sm font-medium">책 제목</label>
          <input type="text" id="book_title" name="post[book_title]" class="border border-gray-300 p-2 bg-white w-full rounded" value="<%= @post&.book_title %>" />
        </div>

        <div class="flex flex-col w-1/3">
          <label for="book_author" class="mb-1  text-sm font-medium">책 저자</label>
        <input type="text" id="book_author" name="post[book_author]" class="border border-gray-300 p-2 bg-white w-full rounded" value="<%= @post&.book_author %>" />
        </div>
      </div>

      <div class="text-sm">
        <%= f.label :title, "게시글 제목", class: " mb-1" %>
       <%= f.text_field :title, class: "w-full border border-gray-300 p-2 bg-white rounded" %>

      </div>

      <!-- 장르 선택 -->
      <div id="genre-container">
        <span class="text-sm mr-2">장르</span>

<% genre_maps = {
  default: {
    "philosophy" => "철학",
    "literature" => "문학",
    "history" => "역사",
    "society" => "사회",
    "economy" => "경제",
    "science_technology" => "과학/기술"
  },
  creation: {
    "poetry" => "시",
    "essay" => "에세이",
    "novel" => "소설"
  },
  board: {
    "book_recommendation" => "책 추천",
    "book_promotion" => "책 홍보",
    "author_story" => "작가 이야기",
    "reading_tips" => "독서팁/습관",
    "event_promotion" => "책 관련 행사 홍보",
    "book_qna" => "책 Q&A",
    "others" => "기타"
  }
} %>

<!-- default 장르 -->
<% genre_maps[:default].each do |eng, kor| %>
  <label class="mr-2 text-sm genre-default">
    <%= radio_button_tag "post[book_genre]", eng, @post.book_genre == eng %>
    <%= kor %>
  </label>
<% end %>

<!-- 창작물 장르 -->
<% genre_maps[:creation].each do |eng, kor| %>
  <label class="mr-2 text-sm genre-creation hidden">
    <%= radio_button_tag "post[book_genre]", eng, @post.book_genre == eng %>
    <%= kor %>
  </label>
<% end %>

<!-- 자유게시판 장르 -->
<% genre_maps[:board].each do |eng, kor| %>
  <label class="mr-2 text-sm genre-board hidden">
    <%= radio_button_tag "post[book_genre]", eng, @post.book_genre == eng %>
    <%= kor %>
  </label>
<% end %>


  
      </div>

      <!-- 본문 (종이 느낌 영역) -->
  <div id="blocks-container" class="bg-white p-6 shadow mt-4 rounded"
     style="min-height: 800px; max-height: 1200px; overflow-y: auto; font-family: 'Noto Sans KR', sans-serif; line-height: 1.4;">

  <% if @post.post_blocks.present? && @post.post_blocks.any? %>
    <% @post.post_blocks.each_with_index do |block, index| %>
      <%= render partial: "post_blocks", locals: { block: block, index: index } %>
    <% end %>
  <% else %>
    <%= render partial: "post_blocks", locals: { block: PostBlock.new(block_type: "paragraph", content: ""), index: 0 } %>
  <% end %>

</div>

    <% end %>
  </div>

  <!-- 오른쪽 세로 버튼들 -->
  <div class="flex flex-col space-y-2 sticky top-24 mt-10 " style="height: fit-content;">
<%= button_tag "임시 저장",
    type: "submit",
    name: "commit",
    value: "draft",
    form: "post-form",
    data: { turbo_confirm: "임시 저장하시겠습니까? 지금 페이지를 떠납니다." },
    class: "border border-gray-300 bg-white px-3 py-1 text-sm" %>
    <%= button_tag "업로드", type: "submit", form: "post-form", class: "bg-[#5d3b2e] text-white px-4 py-2 text-sm  " %>
  </div>
</div>

<style>
#alert-modal {
  position: fixed;
  inset: 0; /* top, right, bottom, left 모두 0 */
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  background-color: rgba(0, 0, 0, 0.5);
  padding: 1rem;
}

#alert-modal > div {
  background-color: #fff;
  border-radius: 0.5rem; /* 8px */
  width: 90vw;
  max-width: 600px;
  max-height: 80vh;
  overflow-y: auto;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  position: relative;
}


  blocks-container {
    font-family: 'Noto Sans KR', sans-serif;
    border: 1px solid #ddd;
    box-shadow: inset 0 0 5px #eee;
    padding: 1rem 1.5rem;
    min-height: 800px;
    max-height: 1200px;
    overflow-y: auto;
    line-height: 1.4;
  }

  .block {
    position: relative;
    background: white;
    border-radius: 0.375rem;
    box-shadow: 0 0 0 transparent;
    transition: box-shadow 0.2s ease, border-color 0.2s ease;
    border: 1px solid transparent;
  }

  /* 포커스 또는 호버 시 보더, 그림자 */
  .block:hover,
  .block.focused {
    # box-shadow: 1px 4px 4px rgb(0 0 0 / 0.1);
    border-color: lightgray;
  }

  /* 드롭다운 왼쪽 상단 */
  .block-controls-left {
    position: absolute;
    top: -1.5rem;
    left: 0.75rem;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease;
    font-size: 0.85rem;
  }

  /* 삭제 버튼 오른쪽 상단 */
  .block-controls-right {
    position: absolute;
    top: -1.5rem;
    right: 0.75rem;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease;
    font-size: 0.85rem;
    color: #dc2626;
    background: transparent;
    border: none;
    cursor: pointer;
    font-weight: bold;
  }

  /* 포커스 혹은 호버 시 컨트롤 표시 */
  .block:hover .block-controls-left,
  .block:hover .block-controls-right,
  .block.focused .block-controls-left,
  .block.focused .block-controls-right {
    opacity: 1;
    pointer-events: auto;
  }

  .block-controls-right:hover {
    color: #b91c1c;
  }

  .block textarea {
  width: 100%;
  font-size: 1rem;
  resize: none;
  background: transparent;
  outline: none;
  min-height: 1.5em; /* 1줄 높이와 동일 */
  line-height: 1.4;
  margin: 1 0 0 0;
  padding: 0.1em 0.25em; /* 텍스트와 경계 간 적당한 여백 */
  font-family: serif;
  overflow-y: hidden;
  height: auto;
  border: none;
  box-sizing: border-box; /* 높이 계산 기준 통일 */
}


  /* 문단 스타일 (기본) */
.block-type-paragraph textarea {
  font-size: 1rem;
  color: #333;
  margin: 0.5rem 0 0 0;
  line-height: 1.5;
}

/* 인용 스타일 */
.block-type-quote textarea {
  font-style: italic;
  border-left: 4px solid #5d3b2e;
  padding-left: 0.5rem;
  margin: 0.2rem 0 0 0;
  color: #2c1a0d;
}

/* 소제목 스타일 */
.block-type-subtitle textarea {
  background-color: #fff;
  font-weight: 600; /* font-semibold */
  font-size: 1.125rem; /* text-lg */
  color: #2c1a0d;
  margin: 1rem 0 0 0;
  padding-bottom: 0.25rem;
}
#blocks-container .block:first-child {
  margin-top: 1rem; /* 원하는 간격으로 조절하세요 */
}


</style>
<script>

  let isFormDirty = false;

  // 사용자가 내용을 입력했는지 감지
  document.addEventListener("input", (e) => {
    if (e.target.closest("#blocks-container")) {
      isFormDirty = true;
    }
  });

  // 페이지 이탈 또는 새로고침 시 경고
  window.addEventListener("beforeunload", function (e) {
    if (isFormDirty) {
      const message = "작성 중인 내용이 사라집니다. 페이지를 떠나시겠습니다?";
      e.preventDefault();
      e.returnValue = message; 
      return message;
    }
  });

  
 const serverPostBlocks = <%= raw @post.post_blocks.present? ? @post.post_blocks.map.with_index { |block, idx| 
    { block_type: block.block_type, content: block.content, index: idx } 
  }.to_json : '[]' %>;
document.addEventListener("DOMContentLoaded", () => {

  const container = document.getElementById("blocks-container");

  function autoResizeTextarea(textarea) {
  textarea.style.height = "auto";

  const value = textarea.value;

  // 기본 1줄 높이 고정 (CSS line-height 기준)
  const lineHeightEm = 1.4; // 이미 CSS에 line-height:1.4; 지정되어 있음
  const fontSizePx = parseFloat(getComputedStyle(textarea).fontSize) || 16; // 기본 16px fallback
  const lineHeightPx = lineHeightEm * fontSizePx;

  // 한 줄에 대략 들어갈 글자 수(임의 설정, 폰트에 따라 다름)
  const maxCharsPerLine = 50; 

  if (
    value.trim() === "" ||                  // 빈문자면
    (!value.includes("\n") && value.length <= maxCharsPerLine) // 줄바꿈 없고 길이도 한 줄 이하면
  ) {
    // 1줄 높이 유지
    textarea.style.height = lineHeightPx + "px";
  } else {
    // 여러 줄일 경우 내용에 맞게 자동 조절
    textarea.style.height = textarea.scrollHeight + "px";
  }
}



  // 블럭 생성 함수 - index 대신 현재 블럭 개수 기준으로 name 할당
  function createBlock(type = "paragraph", content = "") {
    const block = document.createElement("div");
    block.classList.add("block");
    block.classList.add(`block-type-${type}`);

    const blocksCount = container.querySelectorAll(".block").length;

    // textarea 생성
    const textarea = document.createElement("textarea");
    textarea.name = `post[post_blocks_attributes][${blocksCount}][content]`;
    textarea.value = content;
    textarea.placeholder = "내용을 입력하세요";
    // rows 속성 제거 - 자동 높이 조절에 방해됨
    // textarea.setAttribute("rows", 1);

    // 타이핑 시 자동 리사이즈
    textarea.addEventListener("input", () => autoResizeTextarea(textarea));
    // 붙여넣기 후 자동 리사이즈
    textarea.addEventListener("paste", () => {
      setTimeout(() => autoResizeTextarea(textarea), 0);
    });

    autoResizeTextarea(textarea); // 생성 즉시 높이 맞춤

    // 타입 선택 셀렉트 생성
    const select = document.createElement("select");
    select.name = `post[post_blocks_attributes][${blocksCount}][block_type]`;
    select.className = "block-type-selector block-controls-left";
    select.style.padding = "0.2rem 0.5rem";
    select.style.border = "1px solid #ccc";
    select.style.borderRadius = "0.25rem";
    select.style.background = "white";

    const options = [
      { val: "paragraph", label: "문단" },
      { val: "quote", label: "인용" },
      { val: "subtitle", label: "소제목" }
    ];
    options.forEach(opt => {
      const option = document.createElement("option");
      option.value = opt.val;
      option.textContent = opt.label;
      if (opt.val === type) option.selected = true;
      select.appendChild(option);
    });

    select.addEventListener("change", () => {
      block.classList.remove("block-type-paragraph", "block-type-quote", "block-type-subtitle");
      block.classList.add(`block-type-${select.value}`);
    });

    // 삭제 버튼 (첫 블럭 제외)
    if (blocksCount > 0) {
      const removeBtn = document.createElement("button");
      removeBtn.type = "button";
      removeBtn.textContent = "삭제";
      removeBtn.className = "block-controls-right";
      removeBtn.title = "블록 삭제";
      removeBtn.addEventListener("click", () => {
        container.removeChild(block);
        updateBlockNames();
      });
      block.appendChild(removeBtn);
    }

    block.appendChild(select);
    block.appendChild(textarea);
    container.appendChild(block);

    updateBlockNames();

    textarea.focus();
    autoResizeTextarea(textarea);

    block.addEventListener("mouseleave", () => {
  hideTimeout = setTimeout(() => block.classList.remove("focused"), 500);
});

block.addEventListener("mouseenter", () => {
  clearTimeout(hideTimeout);
  block.classList.add("focused");
});

// 추가: select와 textarea에 마우스 enter/leave 이벤트 등록
[select, textarea].forEach(el => {
  el.addEventListener("mouseenter", () => {
    clearTimeout(hideTimeout);
    block.classList.add("focused");
  });
  el.addEventListener("mouseleave", () => {
    hideTimeout = setTimeout(() => {
      if (!block.contains(document.activeElement)) {
        block.classList.remove("focused");
      }
    }, 400);
  });

  el.addEventListener("focus", () => {
    clearTimeout(hideTimeout);
    block.classList.add("focused");
  });

  el.addEventListener("blur", () => {
    hideTimeout = setTimeout(() => {
      if (!block.contains(document.activeElement)) {
        block.classList.remove("focused");
      }
    }, 300);
  });
});
    // 키 이벤트 처리 (엔터, 위/아래 방향키)
    textarea.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();

        const blocks = Array.from(container.querySelectorAll(".block textarea"));
        const currentIndex = blocks.indexOf(textarea);
        const hasNextBlock = currentIndex < blocks.length - 1;

        if (hasNextBlock) {
          blocks[currentIndex + 1].focus();
          blocks[currentIndex + 1].setSelectionRange(0, 0);
        } else {
          const cursorPos = textarea.selectionStart;
          const value = textarea.value;
          const before = value.slice(0, cursorPos);
          const after = value.slice(cursorPos);

          textarea.value = before;
          autoResizeTextarea(textarea);

          createBlock("paragraph", after);
        }
      }

      if (e.key === "ArrowUp") {
        const blocks = Array.from(container.querySelectorAll(".block textarea"));
        const currentIndex = blocks.indexOf(textarea);
        if (currentIndex > 0 && textarea.selectionStart === 0) {
          e.preventDefault();
          const prev = blocks[currentIndex - 1];
          prev.focus();
          prev.setSelectionRange(prev.value.length, prev.value.length);
        }
      }
      if (e.key === "ArrowDown") {
        const blocks = Array.from(container.querySelectorAll(".block textarea"));
        const currentIndex = blocks.indexOf(textarea);
        if (currentIndex < blocks.length - 1 && textarea.selectionStart === textarea.value.length) {
          e.preventDefault();
          const next = blocks[currentIndex + 1];
          next.focus();
          next.setSelectionRange(0, 0);
        }
      }
    });

    return textarea;
  }

  // 블럭 이름(name) 재설정 함수 - 중요!
  function updateBlockNames() {
    const blocks = container.querySelectorAll(".block");
    blocks.forEach((block, idx) => {
      const textarea = block.querySelector("textarea");
      const select = block.querySelector("select");
      if (textarea) {
        textarea.name = `post[post_blocks_attributes][${idx}][content]`;
      }
      if (select) {
        select.name = `post[post_blocks_attributes][${idx}][block_type]`;
      }
    });
  }


  // 카테고리 선택 시 장르 토글 (기존 로직)
  const categorySelect = document.getElementById("category-select");
  function toggleGenres() {
    const selected = categorySelect.value;
    document.querySelectorAll(".genre-default").forEach(el => el.classList.toggle("hidden", selected !== "thought" && selected !== "discussion"));
    document.querySelectorAll(".genre-creation").forEach(el => el.classList.toggle("hidden", selected !== "creation"));
    document.querySelectorAll(".genre-board").forEach(el => el.classList.toggle("hidden", selected !== "board"));
  }
  categorySelect.addEventListener("change", toggleGenres);
  toggleGenres();
});

  </script>

  <!-- 항상 최소 하나의 블럭을 보장 -->
<script>

</script>