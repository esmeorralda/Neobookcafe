<div class="mx-auto flex justify-center gap-8 bg-[#f7f1ea] relative">
  <div class="max-w-4xl w-full p-8 bg-[#f7f1ea] rounded">
    <%= form_with model: @post, local: true, class: "space-y-6", id: "post-form" do |f| %>
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-xl font-bold text-gray-800">새 게시글 작성</h1>
      </div>
<% if @alert_messages.present? %>
  <div class="bg-white mb-6 flex items-start gap-3 text-left whitespace-pre-wrap break-words rounded-md p-6 shadow-md border border-yellow-400 text-yellow-900 font-semibold">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 flex-shrink-0 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" aria-hidden="true">
      <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v2m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
    <div class="px-4"><%= @alert_messages %></div>
  </div>
<% end %>



      <!-- 기본 정보 -->
      <div class="flex justify-between items-center gap-2 max-w-4xl mx-auto bg-[#f7f1ea]">
      
        <div class="flex flex-col w-1/3">
          <label for="category-select" class="mb-1  text-sm font-medium">게시판 선택</label>
         <select id="category-select" name="post[category]" class="border border-gray-300 p-2 bg-white w-full rounded">
           <option value="discussion" <%= "selected" if @post&.category == "discussion" %>>논설문</option>
  <option value="thought" <%= "selected" if @post&.category == "thought" %>>감상문</option>
  <option value="creation" <%= "selected" if @post&.category == "creation" %>>창작물</option>
  <option value="board" <%= "selected" if @post&.category == "board" %>>자유게시글</option>
</select>
        </div>

        <div class="flex flex-col w-1/2">
          <label for="book_title" class="mb-1  text-sm font-medium">책 제목</label>
          <input type="text" id="book_title" name="post[book_title]" class="border border-gray-300 p-2 bg-white w-full rounded" value="<%= @post&.book_title %>" />
        </div>

        <div class="flex flex-col w-1/3">
          <label for="book_author" class="mb-1  text-sm font-medium">책 저자</label>
        <input type="text" id="book_author" name="post[book_author]" class="border border-gray-300 p-2 bg-white w-full rounded" value="<%= @post&.book_author %>" />
        </div>
      </div>

      <div class="text-sm">
        <%= f.label :title, "게시글 제목", class: " mb-1" %>
       <%= f.text_field :title, class: "w-full border border-gray-300 p-2 bg-white rounded" %>

      </div>

      <!-- 장르 선택 -->
      <div id="genre-container">
        <span class="text-sm mr-2">장르</span>

<% genre_maps = {
  default: {
    "philosophy" => "철학",
    "literature" => "문학",
    "history" => "역사",
    "society" => "사회",
    "economy" => "경제",
    "science_technology" => "과학/기술"
  },
  creation: {
    "poetry" => "시",
    "essay" => "에세이",
    "novel" => "소설"
  },
  board: {
    "book_recommendation" => "책 추천",
    "book_promotion" => "책 홍보",
    "author_story" => "작가 이야기",
    "reading_tips" => "독서팁/습관",
    "event_promotion" => "책 관련 행사 홍보",
    "book_qna" => "책 Q&A",
    "others" => "기타"
  }
} %>

<!-- default 장르 -->
<% genre_maps[:default].each do |eng, kor| %>
  <label class="mr-2 text-sm genre-default">
    <%= radio_button_tag "post[book_genre]", eng, @post.book_genre == eng %>
    <%= kor %>
  </label>
<% end %>

<!-- 창작물 장르 -->
<% genre_maps[:creation].each do |eng, kor| %>
  <label class="mr-2 text-sm genre-creation hidden">
    <%= radio_button_tag "post[book_genre]", eng, @post.book_genre == eng %>
    <%= kor %>
  </label>
<% end %>

<!-- 자유게시판 장르 -->
<% genre_maps[:board].each do |eng, kor| %>
  <label class="mr-2 text-sm genre-board hidden">
    <%= radio_button_tag "post[book_genre]", eng, @post.book_genre == eng %>
    <%= kor %>
  </label>
<% end %>


  
      </div>

      <!-- 본문 (종이 느낌 영역) -->
  <div id="blocks-container" class="bg-white p-6 shadow mt-4 rounded"
     style="min-height: 800px; max-height: 1200px; overflow-y: auto; font-family: 'Noto Sans KR', sans-serif; line-height: 1.4;">

  <% if @post.post_blocks.present? && @post.post_blocks.any? %>
    <% @post.post_blocks.each_with_index do |block, index| %>
      <%= render partial: "post_blocks", locals: { block: block, index: index } %>
    <% end %>
  <% else %>
    <%= render partial: "post_blocks", locals: { block: PostBlock.new(block_type: "paragraph", content: ""), index: 0 } %>
  <% end %>

</div>

    <% end %>
  </div>

  <!-- 오른쪽 세로 버튼들 -->
  <div class="flex flex-col space-y-2 sticky top-24 mt-10 " style="height: fit-content;">
<%= button_tag "임시 저장",
    type: "submit",
    name: "commit",
    value: "draft",
    form: "post-form",
    data: { turbo_confirm: "임시 저장하시겠습니까? 지금 페이지를 떠납니다." },
    class: "border border-gray-300 bg-white px-3 py-1 text-sm" %>
    <%= button_tag "업로드", type: "submit", form: "post-form", class: "bg-[#5d3b2e] text-white px-4 py-2 text-sm  " %>
  </div>
</div>

<style>
#alert-modal {
  position: fixed;
  inset: 0; /* top, right, bottom, left 모두 0 */
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  background-color: rgba(0, 0, 0, 0.5);
  padding: 1rem;
}

#alert-modal > div {
  background-color: #fff;
  border-radius: 0.5rem; /* 8px */
  width: 90vw;
  max-width: 600px;
  max-height: 80vh;
  overflow-y: auto;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  position: relative;
}


  blocks-container {
    font-family: 'Noto Sans KR', sans-serif;
    border: 1px solid #ddd;
    box-shadow: inset 0 0 5px #eee;
    padding: 1rem 1.5rem;
    min-height: 800px;
    max-height: 1200px;
    overflow-y: auto;
    line-height: 1.4;
  }

  .block {
    position: relative;
    background: white;
    border-radius: 0.375rem;
    box-shadow: 0 0 0 transparent;
    transition: box-shadow 0.2s ease, border-color 0.2s ease;
    border: 1px solid transparent;
  }

  /* 포커스 또는 호버 시 보더, 그림자 */
  .block:hover,
  .block.focused {
    # box-shadow: 1px 4px 4px rgb(0 0 0 / 0.1);
    border-color: lightgray;
  }

  /* 드롭다운 왼쪽 상단 */
  .block-controls-left {
    position: absolute;
    top: -1.5rem;
    left: 0.75rem;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease;
    font-size: 0.85rem;
  }

  /* 삭제 버튼 오른쪽 상단 */
  .block-controls-right {
    position: absolute;
    top: -1.5rem;
    right: 0.75rem;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease;
    font-size: 0.85rem;
    color: #dc2626;
    background: transparent;
    border: none;
    cursor: pointer;
    font-weight: bold;
  }

  /* 포커스 혹은 호버 시 컨트롤 표시 */
  .block:hover .block-controls-left,
  .block:hover .block-controls-right,
  .block.focused .block-controls-left,
  .block.focused .block-controls-right {
    opacity: 1;
    pointer-events: auto;
  }

  .block-controls-right:hover {
    color: #b91c1c;
  }

  .block textarea {
  width: 100%;
  font-size: 1rem;
  resize: none;
  background: transparent;
  outline: none;
  min-height: 1.5em; /* 1줄 높이와 동일 */
  line-height: 1.4;
  margin: 1 0 0 0;
  padding: 0.1em 0.25em; /* 텍스트와 경계 간 적당한 여백 */
  font-family: serif;
  overflow-y: hidden;
  height: auto;
  border: none;
  box-sizing: border-box; /* 높이 계산 기준 통일 */
}


  /* 문단 스타일 (기본) */
.block-type-paragraph textarea {
  font-size: 1rem;
  color: #333;
  margin: 0.5rem 0 0 0;
  line-height: 1.5;
}

/* 인용 스타일 */
.block-type-quote textarea {
  font-style: italic;
  border-left: 4px solid #5d3b2e;
  padding-left: 0.5rem;
  margin: 0.2rem 0 0 0;
  color: #2c1a0d;
}

/* 소제목 스타일 */
.block-type-subtitle textarea {
  background-color: #fff;
  font-weight: 600; /* font-semibold */
  font-size: 1.125rem; /* text-lg */
  color: #2c1a0d;
  margin: 1rem 0 0 0;
  padding-bottom: 0.25rem;
}
#blocks-container .block:first-child {
  margin-top: 1rem; /* 원하는 간격으로 조절하세요 */
}


</style><script>
(function () {
  // ===================== 공통: 페이지 이탈 경고(한 번만 바인딩) =====================
  if (!window.__post_form_dirty_guard_bound) {
    window.__post_form_dirty_guard_bound = true;

    let isFormDirty = false;
    document.addEventListener("input", (e) => {
      if (e.target.closest("form")) isFormDirty = true;
    });

    window.addEventListener("beforeunload", function (e) {
      if (isFormDirty) {
        const message = "작성 중인 내용이 사라집니다. 페이지를 떠나시겠습니까?";
        e.preventDefault();
        e.returnValue = message;
        return message;
      }
    });
  }

  // ===================== 장르 스켈레톤 =====================
  const GENRE_SKELETON_HTML = `
    <div id="genre-skeleton" class="animate-pulse" style="display:flex; gap:.5rem; margin:.25rem 0;">
      <div style="height:22px; width:80px; background:#eee; border-radius:6px;"></div>
      <div style="height:22px; width:72px; background:#eee; border-radius:6px;"></div>
      <div style="height:22px; width:96px; background:#eee; border-radius:6px;"></div>
    </div>
  `;
  function showGenreSkeleton(container) {
    if (!container || container.querySelector("#genre-skeleton")) return;
    const wrap = document.createElement("div");
    wrap.innerHTML = GENRE_SKELETON_HTML;
    container.prepend(wrap.firstElementChild);
  }
  function hideGenreSkeleton(container) {
    const sk = container && container.querySelector("#genre-skeleton");
    if (sk) sk.remove();
  }

  // ===================== 블록 스켈레톤 =====================
  const BLOCKS_SKELETON_HTML = `
    <div id="blocks-skeleton" style="padding:.5rem">
      <div style="height:14px;background:#eee;border-radius:6px;width:30%;margin-bottom:8px;"></div>
      <div style="height:10px;background:#f0f0f0;border-radius:6px;width:70%;margin-bottom:8px;"></div>
      <div style="height:90px;background:#f7f7f7;border-radius:8px;margin-bottom:10px;"></div>
    </div>
  `;
  function showBlocksSkeleton(container) {
    if (!container || container.querySelector("#blocks-skeleton")) return;
    const wrap = document.createElement("div");
    wrap.innerHTML = BLOCKS_SKELETON_HTML;
    container.prepend(wrap.firstElementChild);
  }
  function hideBlocksSkeleton(container) {
    const sk = container && container.querySelector("#blocks-skeleton");
    if (sk) sk.remove();
  }

  // ===================== 카테고리 ⇄ 장르 토글 =====================
  function bindCategoryGenre() {
    const genreContainer = document.getElementById("genre-container");
    const categorySelect = document.getElementById("category-select");
    if (!genreContainer || !categorySelect) return;
    if (genreContainer.dataset.genreInited === "1") return;
    genreContainer.dataset.genreInited = "1";

    showGenreSkeleton(genreContainer);

    function toggleGenres() {
      const selected = categorySelect.value; // "discussion" | "thought" | "creation" | "board"

      const showDefault = (selected === "thought" || selected === "discussion");
      document.querySelectorAll(".genre-default")
        .forEach(el => el.classList.toggle("hidden", !showDefault));
      document.querySelectorAll(".genre-creation")
        .forEach(el => el.classList.toggle("hidden", selected !== "creation"));
      document.querySelectorAll(".genre-board")
        .forEach(el => el.classList.toggle("hidden", selected !== "board"));

      // 현재 체크된 라디오가 숨겨졌다면, 보이는 첫 라디오를 자동 선택
      const allRadios = Array.from(document.querySelectorAll('input[type="radio"][name="post[book_genre]"]'));
      const checked = allRadios.find(r => r.checked);
      const isCheckedHidden = checked ? checked.closest(".hidden") : null;
      if (!checked || isCheckedHidden) {
        const firstVisible = allRadios.find(r => !r.closest(".hidden"));
        if (firstVisible) firstVisible.checked = true;
      }
    }

    categorySelect.addEventListener("change", toggleGenres);
    requestAnimationFrame(() => {
      toggleGenres();
      hideGenreSkeleton(genreContainer);
    });
  }

  // ===================== 블록 에디터 (window.* 노출: 서버 마크업에서 사용) =====================
  function bindBlock(block) {
    if (!block || block.dataset.bound === '1') return;
    block.dataset.bound = '1';

    const select = block.querySelector('select.block-type-selector');
    const textarea = block.querySelector('textarea');

    if (select) {
      select.addEventListener('change', () => {
        block.classList.remove('block-type-paragraph', 'block-type-quote', 'block-type-subtitle');
        block.classList.add(`block-type-${select.value}`);
        if (textarea) window.autoResizeTextarea(textarea);
      });
    }

    // 컨트롤 show/hide
    let hideTimeout;
    block.addEventListener('focusin', () => {
      clearTimeout(hideTimeout);
      const left  = block.querySelector('.block-type-selector');
      const right = block.querySelector('.block-controls-right');
      if (left)  { left.style.opacity = '1';  left.style.pointerEvents = 'auto'; }
      if (right) { right.style.opacity = '1'; right.style.pointerEvents = 'auto'; }
    });
    block.addEventListener('focusout', () => {
      hideTimeout = setTimeout(() => {
        const left  = block.querySelector('.block-type-selector');
        const right = block.querySelector('.block-controls-right');
        if (left)  { left.style.opacity = '0';  left.style.pointerEvents = 'none'; }
        if (right) { right.style.opacity = '0'; right.style.pointerEvents = 'none'; }
      }, 700);
    });
  }

  function bindExistingBlocks() {
    document.querySelectorAll('#blocks-container .block').forEach(bindBlock);
  }

  function updateTextareaNames() {
    const blocks = document.querySelectorAll('#blocks-container .block');
    blocks.forEach((block, i) => {
      const select = block.querySelector('select');
      const textarea = block.querySelector('textarea');
      if (select)  select.name  = `post[post_blocks_attributes][${i}][block_type]`;
      if (textarea) textarea.name = `post[post_blocks_attributes][${i}][content]`;
    });
  }

  // ===== window.* 공개 함수들 (ERB에 oninput/onkeydown 등으로 이미 연결됨) =====
  window.autoResizeTextarea = function (textarea) {
    if (!textarea) return;
    textarea.style.height = 'auto';
    const value = textarea.value;
    const lineHeightEm = 1.4;
    const fontSizePx = parseFloat(getComputedStyle(textarea).fontSize) || 16;
    const lineHeightPx = lineHeightEm * fontSizePx;
    const maxCharsPerLine = 50;

    if (value.trim() === '' || (!value.includes('\n') && value.length <= maxCharsPerLine)) {
      textarea.style.height = lineHeightPx + 'px';
    } else {
      textarea.style.height = textarea.scrollHeight + 'px';
    }
  };

  window.handleKeyDown = function (e, textarea) {
    const container = document.getElementById('blocks-container');
    if (!container) return;
    const blocks = Array.from(container.querySelectorAll('.block textarea'));
    const currentIndex = blocks.indexOf(textarea);

    // Enter로 블록 분할 (Shift+Enter 제외)
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();

      const cursorPos = textarea.selectionStart;
      const value = textarea.value;
      const before = value.slice(0, cursorPos);
      const after  = value.slice(cursorPos);

      textarea.value = before;
      window.autoResizeTextarea(textarea);

      const currentBlock = textarea.closest('.block');
      const nextBlock = currentBlock.nextElementSibling;

      if (nextBlock && nextBlock.classList.contains('block')) {
        const nextTextarea = nextBlock.querySelector('textarea');
        nextTextarea.focus();
        nextTextarea.setSelectionRange(0, 0);
      } else {
        const newBlock = window.createHtmlBlock('paragraph', after);
        currentBlock.insertAdjacentElement('afterend', newBlock);
        updateTextareaNames();
        const newTextarea = newBlock.querySelector('textarea');
        newTextarea.focus();
        window.autoResizeTextarea(newTextarea);
      }
    }

    // 위/아래 이동
    if (e.key === 'ArrowUp' && textarea.selectionStart === 0) {
      e.preventDefault();
      if (currentIndex > 0) {
        const prev = blocks[currentIndex - 1];
        prev.focus();
        prev.setSelectionRange(prev.value.length, prev.value.length);
      }
    }
    if (e.key === 'ArrowDown' && textarea.selectionStart === textarea.value.length) {
      e.preventDefault();
      if (currentIndex < blocks.length - 1) {
        const next = blocks[currentIndex + 1];
        next.focus();
        next.setSelectionRange(0, 0);
      }
    }
  };

  window.createHtmlBlock = function (type = 'paragraph', content = '') {
    const container = document.getElementById('blocks-container');
    if (!container) return document.createElement('div');
    const index = container.querySelectorAll('.block').length;

    const wrapper = document.createElement('div');
    wrapper.classList.add('block', `block-type-${type}`);
    wrapper.style.position = 'relative';

    // select
    const select = document.createElement('select');
    select.name = `post[post_blocks_attributes][${index}][block_type]`;
    select.className = 'block-type-selector block-controls-left';
    select.style.padding = '0.2rem 0.5rem';
    select.style.border = '1px solid #ccc';
    select.style.borderRadius = '0.25rem';
    select.style.background = 'white';

    [
      { val: 'paragraph', label: '문단' },
      { val: 'quote',     label: '인용' },
      { val: 'subtitle',  label: '소제목' }
    ].forEach(o => {
      const op = document.createElement('option');
      op.value = o.val;
      op.textContent = o.label;
      if (o.val === type) op.selected = true;
      select.appendChild(op);
    });

    // delete button
    const delBtn = document.createElement('button');
    delBtn.type = 'button';
    delBtn.className = 'block-controls-right';
    delBtn.title = '블록 삭제';
    delBtn.textContent = '삭제';
    delBtn.addEventListener('click', () => window.deleteBlock(delBtn));

    // textarea
    const ta = document.createElement('textarea');
    ta.name = `post[post_blocks_attributes][${index}][content]`;
    ta.placeholder = '내용을 입력하세요';
    ta.value = content || '';
    ta.addEventListener('input', () => window.autoResizeTextarea(ta));
    ta.addEventListener('paste', () => setTimeout(() => window.autoResizeTextarea(ta), 0));
    ta.addEventListener('keydown', (ev) => window.handleKeyDown(ev, ta));

    // assemble
    wrapper.appendChild(select);
    wrapper.appendChild(delBtn);
    wrapper.appendChild(ta);

    // behavior
    select.addEventListener('change', () => {
      wrapper.classList.remove('block-type-paragraph', 'block-type-quote', 'block-type-subtitle');
      wrapper.classList.add(`block-type-${select.value}`);
      window.autoResizeTextarea(ta);
    });

    bindBlock(wrapper);
    return wrapper;
  };

  window.deleteBlock = function (button) {
    const block = button.closest('.block');
    if (!block) return;
    block.remove();
    updateTextareaNames();
  };

  // ===================== 블록 초기화 =====================
  function initBlocks() {
    const container = document.getElementById('blocks-container');
    if (!container) return;
    if (container.dataset.blocksInited === '1') {
      // 이미 초기화되어도 높이만 보정
      requestAnimationFrame(() => {
        container.querySelectorAll('textarea').forEach(window.autoResizeTextarea);
      });
      return;
    }
    container.dataset.blocksInited = '1';

    showBlocksSkeleton(container);

    requestAnimationFrame(() => {
      bindExistingBlocks();                           // 기존 블록 바인딩
      container.querySelectorAll('textarea').forEach(window.autoResizeTextarea); // 높이 보정
      updateTextareaNames();                          // name 재정렬 보정
      hideBlocksSkeleton(container);
    });
  }

  // ===================== Init (Turbo-safe) =====================
  function initAll() {
    bindCategoryGenre();
    initBlocks();
  }

  document.addEventListener('DOMContentLoaded', initAll);
  document.addEventListener('turbo:load', initAll);
  document.addEventListener('turbo:render', initAll);
})();
</script>
