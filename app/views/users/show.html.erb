<!-- app/views/users/show.html.erb -->
<div class="max-w-4xl mx-auto px-6 py-12 text-[#3e2f23]">
  <div class="flex justify-between items-start">
    <!-- 왼쪽: 이름 + 자기소개 -->
    <div>
      <div class="flex items-end">
        <h1 class="text-4xl font-bold text-[#3e2f23]">
          <%= @user.name || "User" %>
        </h1>
        <span class="ml-2 text-sm text-[#a09388] mb-1">님의 공간</span>
      </div>

      <!-- 자기소개 -->
      <p class="mt-4 text-sm italic text-[#3e2f23]">
        “<%= @user.self_intro.presence || '한줄 소개가 없습니다.' %>”
      </p>
    </div>

    <!-- 오른쪽 버튼: 본인만 보임 -->
    <% if current_user == @user %>
      <div class="space-y-2 text-sm text-right ml-4">
        <%= link_to "자기 소개 편집", edit_user_path(current_user), class: "block border border-[#3e2f23] px-4 py-2 hover:bg-[#f3ede3]" %>
        <%= link_to "개인 정보 수정", edit_user_registration_path, class: "block border border-[#3e2f23] px-4 py-2 hover:bg-[#f3ede3]" %>
      </div>
    <% end %>
  </div>

  <!-- 인용 슬라이더 -->
  <div id="intro-slider" class="relative overflow-hidden mt-10 border-y py-6 text-center text-lg text-[#3e2f23] italic">
  <% if @user.book_intros.where.not(quote: [nil, ""]).exists? %>
    <div id="intro-track" class="flex transition-transform duration-1500 ease-in-out">
      <% @user.book_intros.where.not(quote: [nil, ""]).each do |intro| %>
        <div class="flex-shrink-0 w-full px-4">
          <span class="block text-xl font-light mb-2">“<%= intro.quote %>”</span>
          <span class="block text-sm text-[#a09388]">&lt;<%= intro.book_title.presence || "책 제목" %>&gt; <%= intro.author_name.presence || "저자이름" %></span>
        </div>
      <% end %>
    </div>
    <!-- 좌우 버튼 -->
    <button id="prev-btn" class="absolute left-2 top-1/2 transform -translate-y-1/2 bg-[#3e2f23] text-white px-3 py-1 rounded opacity-70 hover:opacity-100">‹</button>
    <button id="next-btn" class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-[#3e2f23] text-white px-3 py-1 rounded opacity-70 hover:opacity-100">›</button>
  <% else %>
    <div class="text-sm text-[#a09388] italic">
      책 소개 정보가 없습니다.
    </div>
  <% end %>
</div>

  <!-- 탭 메뉴 -->
  <% if current_user == @user %>
    <div class="mt-10 flex space-x-10 justify-center text-[#a09388] text-sm">
      <button data-tab="my_posts" class="tab-button border-b-2 border-[#3e2f23] pb-1 font-medium">내가 쓴 글</button>
      <button data-tab="drafted_posts" class="tab-button hover:text-[#3e2f23]">임시 저장 글</button>
      <button data-tab="liked_posts" class="tab-button hover:text-[#3e2f23]">좋아요 누른 글</button>
      <button data-tab="saved_posts" class="tab-button hover:text-[#3e2f23]">저장 한 글</button>
    </div>
  <% else %>
    <div class="mt-10 flex justify-center text-[#a09388] text-sm">
      <span class="border-b-2 border-[#3e2f23] pb-1 font-medium"><%= @user.name %>님의 글</span>
    </div>
  <% end %>

  <!-- 탭 컨텐츠 -->
  <div id="posts-container">
    <div id="my_posts" class="posts-tab">
      <%= render partial: "users/posts", locals: { posts: @my_posts } %>
      <%= render partial: "users/pagination", locals: { page_no: 1, total_pages: @my_posts_total_pages, tab: 'my_posts' } %>
    </div>

    <% if current_user == @user %>
      <div id="drafted_posts" class="posts-tab hidden">
        <%= render partial: "users/posts", locals: { posts: @drafted_posts } %>
        <%= render partial: "users/pagination", locals: { page_no: 1, total_pages: @drafted_posts_total_pages, tab: 'drafted_posts' } %>
      </div>

      <div id="liked_posts" class="posts-tab hidden">
        <%= render partial: "users/posts", locals: { posts: @liked_posts } %>
        <%= render partial: "users/pagination", locals: { page_no: 1, total_pages: @liked_posts_total_pages, tab: 'liked_posts' } %>
      </div>

      <div id="saved_posts" class="posts-tab hidden">
        <%= render partial: "users/posts", locals: { posts: @saved_posts } %>
        <%= render partial: "users/pagination", locals: { page_no: 1, total_pages: @saved_posts_total_pages, tab: 'saved_posts' } %>
      </div>
    <% end %>
  </div>
</div>

<script>
(function () {
  // ================= Skeletons =================
  const POSTS_SKELETON_HTML = `
    <div class="space-y-3 animate-pulse p-2">
      <div class="h-5 bg-gray-200 rounded w-1/3"></div>
      <div class="h-4 bg-gray-100 rounded w-full"></div>
      <div class="h-4 bg-gray-100 rounded w-5/6"></div>
      <div class="h-4 bg-gray-100 rounded w-4/6"></div>
      <div class="h-5 bg-gray-200 rounded w-1/4 mt-3"></div>
      <div class="h-4 bg-gray-100 rounded w-11/12"></div>
      <div class="h-4 bg-gray-100 rounded w-3/4"></div>
    </div>
  `;
  function showSkeleton(el) {
    if (!el) return;
    el.innerHTML = POSTS_SKELETON_HTML;
  }

  // ================= Slider =================
  function initSlider() {
    const track = document.getElementById("intro-track");
    if (!track) return; // 슬라이더가 없는 페이지

    // 중복 바인딩/타이머 방지
    if (track.dataset.bound === "1") return;
    track.dataset.bound = "1";

    const slides = track.children || [];
    const totalSlides = slides.length || 0;
    let currentIndex = 0;

    function updateSlidePosition() {
      track.style.transform = `translateX(-${currentIndex * 100}%)`;
    }

    // Prev/Next 버튼
    const prevBtn = document.getElementById("prev-btn");
    const nextBtn = document.getElementById("next-btn");

    if (prevBtn && !prevBtn.dataset.bound) {
      prevBtn.dataset.bound = "1";
      prevBtn.addEventListener("click", () => {
        if (!totalSlides) return;
        currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
        updateSlidePosition();
      });
    }
    if (nextBtn && !nextBtn.dataset.bound) {
      nextBtn.dataset.bound = "1";
      nextBtn.addEventListener("click", () => {
        if (!totalSlides) return;
        currentIndex = (currentIndex + 1) % totalSlides;
        updateSlidePosition();
      });
    }

    // 자동 넘김 (기존 타이머 정리 후 재설정)
    if (window.__introSliderTimer) {
      clearInterval(window.__introSliderTimer);
      window.__introSliderTimer = null;
    }
    if (totalSlides > 1) {
      window.__introSliderTimer = setInterval(() => {
        currentIndex = (currentIndex + 1) % totalSlides;
        updateSlidePosition();
      }, 5000);
    }

    // 첫 렌더 보정
    requestAnimationFrame(updateSlidePosition);
  }

  // ================= Tabs & Pagination =================
  const fetchControllers = {}; // tab -> AbortController

  function initTabs() {
    // 탭 버튼/컨테이너
    const tabButtons = document.querySelectorAll(".tab-button");
    const postsContainer = document.getElementById("posts-container"); // 탭 컨텐츠 래퍼(위임용)
    if (!tabButtons.length || !postsContainer) return;

    // 중복 바인딩 방지
    if (!postsContainer.dataset.bound) {
      postsContainer.dataset.bound = "1";

      // 페이지네이션 위임
      postsContainer.addEventListener("click", (e) => {
        const link = e.target.closest(".pagination-link");
        if (!link) return;
        e.preventDefault();
        const page = link.dataset.page;
        const tab  = link.dataset.tab;
        if (!tab || !page) return;
        fetchPosts(tab, page);
        setActiveTabStyles(tabButtons, tab);
      });
    }

    // 탭 클릭 바인딩 (중복 방지)
    tabButtons.forEach((btn) => {
      if (btn.dataset.bound === "1") return;
      btn.dataset.bound = "1";
      btn.addEventListener("click", () => {
        const targetTab = btn.dataset.tab;
        if (!targetTab) return;
        fetchPosts(targetTab, 1);
        setActiveTabStyles(tabButtons, targetTab);
      });
    });

    // 초기 탭 결정: data-default="1"가 있으면 그 탭, 없으면 my_posts, 그것도 없으면 첫 탭
    let initial = (document.querySelector('.tab-button[data-default="1"]') || null);
    let initialTab = initial ? initial.dataset.tab : "my_posts";
    if (!document.getElementById(initialTab)) {
      const firstBtn = tabButtons[0];
      initialTab = firstBtn ? firstBtn.dataset.tab : null;
    }
    if (initialTab) {
      setActiveTabStyles(tabButtons, initialTab);
      // 초기 로딩(이미 서버에서 렌더된 경우 생략해도 OK)
      const initialDiv = document.getElementById(initialTab);
      if (initialDiv && !initialDiv.dataset.loadedOnce) {
        initialDiv.dataset.loadedOnce = "1";
        fetchPosts(initialTab, 1); // 필요 시 주석 처리 가능
      }
    }
  }

  function setActiveTabStyles(tabButtons, activeTab) {
    tabButtons.forEach((b) => {
      if (b.dataset.tab === activeTab) {
        b.classList.add("border-b-2", "border-[#3e2f23]", "font-medium");
        b.classList.remove("text-[#a09388]");
      } else {
        b.classList.remove("border-b-2", "border-[#3e2f23]", "font-medium");
        b.classList.add("text-[#a09388]");
      }
    });
    // 탭 컨텐츠 show/hide
    document.querySelectorAll(".posts-tab").forEach((tabDiv) => {
      tabDiv.classList.toggle("hidden", tabDiv.id !== activeTab);
    });
  }

  function abortOngoing(tab) {
    const c = fetchControllers[tab];
    if (c) {
      try { c.abort(); } catch (_) {}
      delete fetchControllers[tab];
    }
  }

  function fetchPosts(tab, page = 1) {
    const targetDiv = document.getElementById(tab);
    if (!targetDiv) return;

    // userId (ERB)
    const userId = <%= (current_user&.id || @user&.id).to_i %>;
    const url = `/users/${userId}/${tab}?page=${encodeURIComponent(page)}`;

    // 스켈레톤 표시
    showSkeleton(targetDiv);

    // 중복 요청 취소
    abortOngoing(tab);
    const controller = new AbortController();
    fetchControllers[tab] = controller;

    fetch(url, {
      headers: { "X-Requested-With": "XMLHttpRequest" },
      signal: controller.signal
    })
      .then((res) => {
        if (!res.ok) throw new Error("Failed to fetch");
        return res.text();
      })
      .then((html) => {
        // 취소된 후 도착한 응답 무시
        if (fetchControllers[tab] !== controller) return;
        targetDiv.innerHTML = html;
      })
      .catch((err) => {
        if (err.name === "AbortError") return;
        console.error(err);
        targetDiv.innerHTML = `
          <div class="p-4 text-sm text-red-600">
            목록을 불러오지 못했습니다. 잠시 후 다시 시도해 주세요.
          </div>
        `;
      })
      .finally(() => {
        if (fetchControllers[tab] === controller) {
          delete fetchControllers[tab];
        }
      });
  }

  // ================= Auto init (Turbo-safe) =================
  function initAll() {
    initSlider();
    initTabs();
  }

  document.addEventListener("DOMContentLoaded", initAll);
  document.addEventListener("turbo:load", initAll);
  document.addEventListener("turbo:render", initAll);
})();
</script>
